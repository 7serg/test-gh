name: Start runner 

on:
  workflow_dispatch:

jobs:
  start-runner:
    name: Start Server
    uses: ./.github/workflows/start-server.yml
    secrets:
      github-token: ${{ secrets.GH_PAT }}
    with:
      aws-region: eu-central-1
      role-to-assume: arn:aws:iam::585768185180:role/github_oidc_role
      runner-ami: ${{ vars.RUNNER_AMI }}
      instance-type: t2.micro
      subnet-id: ${{ vars.SUBNET_ID }}
      security-group-id: ${{ vars.SG_ID }}
    permissions:
      id-token: write

#   start-runner:
#     name: Start self-hosted EC2 runner
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write
#       contents: read
#     outputs:
#       label: ${{ steps.start-ec2-runner.outputs.label }}
#       ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

#     steps:
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-region: eu-central-1
#           role-to-assume: arn:aws:iam::585768185180:role/github_oidc_role
#           role-session-name: testSession

#       - name: Start EC2 runner
#         id: start-ec2-runner
#         uses: machulav/ec2-github-runner@v2
#         with:
#           mode: start
#           github-token: ${{ secrets.GH_PAT }}
#           ec2-image-id: ${{ vars.RUNNER_AMI }}
#           ec2-instance-type: t2.micro
#           subnet-id: ${{ vars.SUBNET_ID }}
#           security-group-id: ${{ vars.SG_ID }}

  build:
    name: Build image
    needs: start-runner 
    runs-on: ${{ needs.start-runner.outputs.runner-label }}
    permissions:
      id-token: write
      contents: read
    outputs:
        image_tag: ${{ steps.define-commit-hash.outputs.short_sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List files
        run: ls -al

      - name: Set outputs
        id: define-commit-hash
        run: |
            echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "$(git rev-parse --short HEAD)" > commit_hash.txt


      - name: Composite action for login to ECR and building an image
        uses: ./.github/my-custom-action
        with:
            role-to-assume: arn:aws:iam::585768185180:role/github_oidc_role
            aws-region: ${{ vars.AWS_REGION }}
            ecr_repo_url: ${{ vars.ECR_REPO_URL }}
            image_tag: ${{ steps.define-commit-hash.outputs.short_sha }}


    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v4 
    #     with:
    #         role-to-assume: arn:aws:iam::585768185180:role/github_oidc_role
    #         aws-region: ${{ vars.AWS_REGION }}
    #         repository_name: test_app


    #   - name: Login to Amazon ECR
    #     id: login-ecr
    #     uses: aws-actions/amazon-ecr-login@v2

    # #   - name: Login to Amazon ECR
    # #     run: |
    # #         aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_REPO_URL }}

    #   - name: Build, tag, and push docker image to Amazon ECR
    #     env:
    #         REGISTRY: ${{ vars.ECR_REPO_URL }}
    #         REPOSITORY: test_app
    #         IMAGE_TAG: ${{ steps.define-commit-hash.outputs.short_sha }}
    #     run: |
    #         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
    #         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


  deploy:
    name: Deploy to EKS
    needs: [start-runner, build]
    runs-on: ${{ needs.start-runner.outputs.label }}
    permissions:
      id-token: write
      contents: read

    steps:

      - name: Setup kubectl on the node
        uses: azure/setup-kubectl@v4
        id: install
               

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install unzip
        run: sudo apt-get update && sudo apt-get install -y unzip


      - name: Install AWS CLI
        run: |
          echo "Installing AWS CLI..."
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            rm -rf awscliv2.zip aws
            echo "AWS CLI installed successfully."
          else
            echo "AWS CLI is already installed."
          fi


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
            role-to-assume: arn:aws:iam::585768185180:role/github_oidc_role
            aws-region: ${{ vars.AWS_REGION }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2        

      - name: Update kubeconfig for EKS
        run: |
            echo "Updating kubeconfig for EKS..."
            aws eks update-kubeconfig \
            --region eu-central-1 \
            --name ${{ vars.CLUSTER_NAME }}   

      - name: Verify image exists
        env:
            REGISTRY: ${{ vars.ECR_REPO_URL }}
            REPOSITORY: ${{ vars.REPO_NAME }}
            IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: |
            aws ecr describe-images \
            --repository-name ${REPOSITORY} \
            --image-ids imageTag=${IMAGE_TAG} \
            || { echo "Image tag ${IMAGE_TAG} not found in ECR"; exit 1; }    
            

      - name: Deploy application
        env:
            REGISTRY: ${{ vars.ECR_REPO_URL }}
            REPOSITORY: test_app
            IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: |
              echo "Deploying image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
              
              # Replace the image in deployment file
              sed -i "s%image:.*%image: $REGISTRY/$REPOSITORY:$IMAGE_TAG%" kubernetes/deployment.yml
              
              # Apply both deployment and service
              kubectl apply -f kubernetes/deployment.yml
              
              # Wait for deployment rollout
              kubectl rollout status deployment/test-app -n default
              
              # Get LoadBalancer URL
              echo "Waiting for LoadBalancer to be ready..."
              sleep 60
              echo "LoadBalancer URL:"
              kubectl get service test-app-service -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [start-runner, build, deploy]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: ${{ always() }} 

    steps:

      - name: Debug Outputs
        run: |
          echo "Runner Label: ${{ needs.start-runner.outputs.runner-label }}"
          echo "Instance ID: ${{ needs.start-runner.outputs.instance-id }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
            role-to-assume: arn:aws:iam::585768185180:role/github_oidc_role
            aws-region: ${{ vars.AWS_REGION }}

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          region: ${{ vars.AWS_REGION }}
          mode: stop
          github-token: ${{ secrets.GH_PAT }}
          label: ${{ needs.start-runner.outputs.runner-label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.instance-id}}
    
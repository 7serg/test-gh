name: Deploy App

on:
  workflow_dispatch:
    inputs:
      build_run_id:
        description: 'Run ID of the Build Workflow'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ["self-hosted", "Linux", "X64"]

    steps:
      - name: Download commit hash artifact
        uses: actions/download-artifact@v4
        with:
          name: commit-hash
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}
          run-id: ${{ inputs.build_run_id }}

      - name: Read commit hash
        id: read-commit-hash
        run: |
          export COMMIT_HASH=$(cat commit_hash.txt)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_ENV

      - name: Verify image exists
        env:
          REGISTRY: ${{ vars.ECR_REPO_URL }}
          REPOSITORY: ${{ vars.REPO_NAME }}
          IMAGE_TAG: ${{ env.commit_hash }}
        run: |
          aws ecr describe-images \
            --repository-name ${REPOSITORY} \
            --image-ids imageTag=${IMAGE_TAG} \
            || { echo "Image tag ${IMAGE_TAG} not found in ECR"; exit 1; }

      - name: Deploy application
        env:
          REGISTRY: ${{ vars.ECR_REPO_URL }}
          REPOSITORY: test_app
          IMAGE_TAG: ${{ env.commit_hash }}
        run: |
          echo "Deploying image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
          
          # Replace the image in deployment file
          sed -i "s%image:.*%image: $REGISTRY/$REPOSITORY:$IMAGE_TAG%" kubernetes/deployment.yml
          
          # Apply both deployment and service
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          
          # Wait for deployment rollout
          kubectl rollout status deployment/test-app -n default
          
          # Get LoadBalancer URL
          echo "Waiting for LoadBalancer to be ready..."
          sleep 60
          echo "LoadBalancer URL:"
          kubectl get service test-app-service -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
